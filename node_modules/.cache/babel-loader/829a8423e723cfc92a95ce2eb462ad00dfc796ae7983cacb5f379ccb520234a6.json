{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\treep\\\\OneDrive\\\\Escritorio\\\\MP07\\\\UF01\\\\calculator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport Display from './Display';\nimport Keypad from './Keypad';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Estado para almacenar la entrada actual del usuario\n  const [input, setInput] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // Función que maneja los clics en los botones\n  const handleClick = value => {\n    if (value === 'C') {\n      // Reinicia la entrada si se presiona 'C' (Clear)\n      setInput('');\n    } else if (value === '=') {\n      try {\n        // Evalúa la expresión ingresada y actualiza la entrada con el resultado\n        setInput(eval(input).toString());\n      } catch (error) {\n        // Muestra 'Error' si la evaluación falla\n        setInput('Error');\n      }\n    } else {\n      // Agrega el valor del botón presionado a la entrada actual\n      setInput(input + value);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark' : 'light'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `boton ${isDarkMode ? 'dark' : 'light'}`,\n      onClick: toggleDarkMode,\n      children: isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `calculator ${isDarkMode ? 'dark' : 'light'}`,\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        input: input,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n        handleClick: handleClick,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hVnzLbxCLVZot8Xt4kmQ79FzQnk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Display","Keypad","jsxDEV","_jsxDEV","App","_s","input","setInput","isDarkMode","setIsDarkMode","toggleDarkMode","prevMode","handleClick","value","eval","toString","error","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/treep/OneDrive/Escritorio/MP07/UF01/calculator/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport Display from './Display';\nimport Keypad from './Keypad';\nimport './styles/App.css';\n\nfunction App() {\n  // Estado para almacenar la entrada actual del usuario\n  const [input, setInput] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // Función que maneja los clics en los botones\n  const handleClick = (value) => {\n    if (value === 'C') {\n      // Reinicia la entrada si se presiona 'C' (Clear)\n      setInput('');\n    } else if (value === '=') {\n      try {\n        // Evalúa la expresión ingresada y actualiza la entrada con el resultado\n        setInput(eval(input).toString());\n      } catch (error) {\n        // Muestra 'Error' si la evaluación falla\n        setInput('Error');\n      }\n    } else {\n      // Agrega el valor del botón presionado a la entrada actual\n      setInput(input + value);\n    }\n  };\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark' : 'light'}`}>\n      <button className={`boton ${isDarkMode ? 'dark' : 'light'}`} onClick={toggleDarkMode}>\n        {isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\n      </button>\n      <div className={`calculator ${isDarkMode ? 'dark' : 'light'}`}>\n        {/* Componente que muestra la entrada actual */}\n        <Display input={input} isDarkMode={isDarkMode} />\n        {/* Componente que contiene los botones de la calculadora */}\n        <Keypad handleClick={handleClick} isDarkMode={isDarkMode} />\n      </div>\n    </div>\n  );  \n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3BD,aAAa,CAACE,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACtC,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAIA,KAAK,KAAK,GAAG,EAAE;MACjB;MACAN,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,MAAM,IAAIM,KAAK,KAAK,GAAG,EAAE;MACxB,IAAI;QACF;QACAN,QAAQ,CAACO,IAAI,CAACR,KAAK,CAAC,CAACS,QAAQ,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAT,QAAQ,CAAC,OAAO,CAAC;MACnB;IACF,CAAC,MAAM;MACL;MACAA,QAAQ,CAACD,KAAK,GAAGO,KAAK,CAAC;IACzB;EACF,CAAC;EAED,oBACEV,OAAA;IAAKc,SAAS,EAAE,OAAOT,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;IAAAU,QAAA,gBACrDf,OAAA;MAAQc,SAAS,EAAE,SAAST,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;MAACW,OAAO,EAAET,cAAe;MAAAQ,QAAA,EAClFV,UAAU,GAAG,sBAAsB,GAAG;IAAqB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eACTpB,OAAA;MAAKc,SAAS,EAAE,cAAcT,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;MAAAU,QAAA,gBAE5Df,OAAA,CAACH,OAAO;QAACM,KAAK,EAAEA,KAAM;QAACE,UAAU,EAAEA;MAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEjDpB,OAAA,CAACF,MAAM;QAACW,WAAW,EAAEA,WAAY;QAACJ,UAAU,EAAEA;MAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClB,EAAA,CAzCQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}